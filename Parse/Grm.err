Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "SWITCH" was declared but never used
Warning: Terminal "CASE" was declared but never used
Warning: Non terminal "Unary_Operator" was declared but never used
Warning: Non terminal "Cast_Expression" was declared but never used
Warning: Non terminal "Identifier" was declared but never used
Warning: Non terminal "Expresson" was declared but never used
Warning: Non terminal "LabeledStatementList" was declared but never used
Warning: Non terminal "Declaration" was declared but never used
Warning: Non terminal "Program" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #23
  between TypeName ::= ENUM (*) 
  and     TypeName ::= ENUM (*) ID 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #263
  between SelectionStatement ::= IF LPAREN Expression RPAREN Statement (*) 
  and     SelectionStatement ::= IF LPAREN Expression RPAREN Statement (*) ELSE Statement 
  under symbol ELSE
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** Production "type_name ::= ID " never reduced
*** Production "type_name ::= ENUM ID " never reduced
*** Production "type_name ::= DOUBLE " never reduced
*** Production "type_name ::= FLOAT " never reduced
*** Production "type_name ::= LONG " never reduced
*** Production "type_name ::= INT " never reduced
*** Production "type_name ::= SHORT " never reduced
*** Production "type_name ::= CHAR " never reduced
*** Production "type_name ::= VOID " never reduced
*** Production "Var ::= ID " never reduced
*** Production "Exp ::= Var " never reduced
*** Production "Exp ::= error " never reduced
Writing parser...
===== Terminals =====
SHORT TIMES GT ARROW DIVASSIGN 
CONST GE PERIOD REGISTER ENUM 
RBRACK SIZEOF COMMA RBRACE RPAREN 
LBRACK LT INCREMENT SUBASSIGN DOUBLE 
STRUCT LBRACE BWISEANDASSIGN LPAREN MODASSIGN 
NOT TILDE LE VAR FLOAT 
BITWISEAND GOTO EQ LSHIFTASSIGN MODULUS 
LONG PLUS DIVIDE QUESTION UNION 
WHILE ASSIGN CHAR ADDASSIGN SWITCH 
DO FOR EXTERN VOID RETURN 
ELSE BREAK FUN INT STRING_LITERAL 
EOF SEMICOLON DEFAULT ELIPSES MULASSIGN 
DECREMENT MINUS OR error DECIMAL_LITERAL 
CONTINUE IF BWISEOR ID COLON 
BWISEXOR BWISEORASSIGN RSHIFTASSIGN VOLATILE CHAR_LITERAL 
CASE RSHIFT BWISEXORASSIGN NEQ AND 
STATIC LSHIFT TYPEDEF AUTO 

===== Non terminals =====
DeclarationList LogicalAndExpression ExclusiveOrExpression struct_declaration_list bitfield_list 
Constant initializer pointer_list Unary_Operator enumerator 
Cast_Expression $START TypeName Var initializer_list 
ExpressionStatement initialization StatementList struct_or_union name 
CastExpression UnaryExpression ArgumentExpressionList StatementListOpt CompoundStatement 
AdditiveExpression AndExpression InclusiveOrExpression expression_array_type_list PrimaryExpression 
ArgumentExpressionListOpt bitfield_value enumerator_list DeclarationListOpt parameter_type_list 
type_parameters empty_array_type_list MultiplicativeExpression LabeledStatement AssignmentOperator 
brackets_list AssignmentExpression ConditionalExpression type_name EqualityExpression 
JumpStatement Identifier ShiftExpression Exp parameter_list 
expression_array_type empty_array_type LogicalOrExpression type_augments SelectionStatement 
Expresson UnaryOperator LabeledStatementList Statement Expression 
parameters struct_or_union_declarator declaration Declaration Program 
RelationalExpression ExpressionOpt IterationStatement PostfixExpression type 


===== Productions =====
initializer ::= LBRACE initializer_list RBRACE 
initializer ::= AssignmentExpression 
initializer_list ::= initializer_list COMMA initializer 
initializer_list ::= initializer 
parameter_type_list ::= parameter_type_list COMMA type 
parameter_type_list ::= type 
parameter_list ::= parameter_list COMMA type name 
parameter_list ::= type name 
parameters ::= LPAREN RPAREN 
parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN 
parameters ::= LPAREN parameter_list RPAREN 
type_parameters ::= LPAREN RPAREN 
type_parameters ::= LPAREN parameter_type_list COMMA ELIPSES RPAREN 
type_parameters ::= LPAREN parameter_type_list RPAREN 
struct_or_union ::= UNION 
struct_or_union ::= STRUCT 
struct_declaration_list ::= struct_declaration_list type name SEMICOLON 
struct_declaration_list ::= type name SEMICOLON 
enumerator ::= ID ASSIGN Constant 
enumerator ::= ID 
enumerator_list ::= enumerator_list COMMA enumerator 
enumerator_list ::= enumerator 
struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE 
initialization ::= ASSIGN initializer 
initialization ::= 
type_name ::= ID 
type_name ::= ENUM ID 
type_name ::= DOUBLE 
type_name ::= FLOAT 
type_name ::= LONG 
type_name ::= INT 
type_name ::= SHORT 
type_name ::= CHAR 
type_name ::= VOID 
pointer_list ::= pointer_list TIMES 
pointer_list ::= TIMES 
brackets_list ::= expression_array_type_list 
brackets_list ::= empty_array_type_list 
type_augments ::= pointer_list brackets_list 
type_augments ::= brackets_list 
type_augments ::= pointer_list 
type ::= TypeName 
type ::= TypeName type_augments 
expression_array_type ::= LBRACK Constant RBRACK 
expression_array_type_list ::= expression_array_type_list expression_array_type 
expression_array_type_list ::= expression_array_type 
empty_array_type ::= LBRACK RBRACK 
empty_array_type_list ::= empty_array_type_list empty_array_type 
empty_array_type_list ::= empty_array_type 
bitfield_value ::= REGISTER 
bitfield_value ::= AUTO 
bitfield_value ::= STATIC 
bitfield_value ::= EXTERN 
bitfield_value ::= VOLATILE 
bitfield_value ::= CONST 
bitfield_list ::= bitfield_value bitfield_list 
bitfield_list ::= 
name ::= ID 
declaration ::= ENUM ID LBRACE enumerator_list RBRACE 
declaration ::= bitfield_list struct_or_union name struct_or_union_declarator 
declaration ::= TYPEDEF type name SEMICOLON 
declaration ::= FUN bitfield_list type name type_parameters SEMICOLON 
declaration ::= FUN bitfield_list type name parameters CompoundStatement 
declaration ::= VAR bitfield_list type name initialization SEMICOLON 
JumpStatement ::= RETURN ExpressionOpt SEMICOLON 
JumpStatement ::= BREAK SEMICOLON 
JumpStatement ::= CONTINUE SEMICOLON 
JumpStatement ::= GOTO ID SEMICOLON 
IterationStatement ::= FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement 
IterationStatement ::= DO Statement WHILE LPAREN Expression RPAREN SEMICOLON 
IterationStatement ::= WHILE LPAREN Expression RPAREN Statement 
SelectionStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
SelectionStatement ::= IF LPAREN Expression RPAREN Statement 
ExpressionOpt ::= Expression 
ExpressionOpt ::= 
ExpressionStatement ::= ExpressionOpt SEMICOLON 
StatementList ::= Statement 
StatementList ::= StatementList Statement 
DeclarationList ::= declaration DeclarationList 
DeclarationList ::= declaration 
StatementListOpt ::= StatementList 
StatementListOpt ::= 
DeclarationListOpt ::= DeclarationList 
DeclarationListOpt ::= 
CompoundStatement ::= LBRACE DeclarationListOpt StatementListOpt RBRACE 
LabeledStatement ::= DEFAULT COLON Statement 
LabeledStatement ::= ID COLON Statement 
Statement ::= JumpStatement 
Statement ::= IterationStatement 
Statement ::= SelectionStatement 
Statement ::= ExpressionStatement 
Statement ::= CompoundStatement 
Statement ::= LabeledStatement 
TypeName ::= ENUM 
TypeName ::= ENUM ID 
TypeName ::= VOID 
TypeName ::= SHORT 
TypeName ::= LONG 
TypeName ::= CHAR 
TypeName ::= DOUBLE 
TypeName ::= FLOAT 
TypeName ::= INT 
AssignmentOperator ::= BWISEORASSIGN 
AssignmentOperator ::= RSHIFTASSIGN 
AssignmentOperator ::= LSHIFTASSIGN 
AssignmentOperator ::= BWISEXORASSIGN 
AssignmentOperator ::= BWISEANDASSIGN 
AssignmentOperator ::= MODASSIGN 
AssignmentOperator ::= DIVASSIGN 
AssignmentOperator ::= MULASSIGN 
AssignmentOperator ::= SUBASSIGN 
AssignmentOperator ::= ADDASSIGN 
AssignmentOperator ::= ASSIGN 
Expression ::= Expression COMMA AssignmentExpression 
Expression ::= AssignmentExpression 
AssignmentExpression ::= UnaryExpression AssignmentOperator AssignmentExpression 
AssignmentExpression ::= ConditionalExpression 
ConditionalExpression ::= LogicalOrExpression QUESTION Expression COLON ConditionalExpression 
ConditionalExpression ::= LogicalOrExpression 
LogicalOrExpression ::= LogicalOrExpression OR LogicalAndExpression 
LogicalOrExpression ::= LogicalAndExpression 
LogicalAndExpression ::= LogicalAndExpression AND InclusiveOrExpression 
LogicalAndExpression ::= InclusiveOrExpression 
InclusiveOrExpression ::= InclusiveOrExpression BWISEOR ExclusiveOrExpression 
InclusiveOrExpression ::= ExclusiveOrExpression 
ExclusiveOrExpression ::= ExclusiveOrExpression BWISEXOR AndExpression 
ExclusiveOrExpression ::= AndExpression 
AndExpression ::= AndExpression BITWISEAND EqualityExpression 
AndExpression ::= EqualityExpression 
EqualityExpression ::= EqualityExpression NEQ RelationalExpression 
EqualityExpression ::= EqualityExpression EQ RelationalExpression 
EqualityExpression ::= RelationalExpression 
RelationalExpression ::= RelationalExpression GE ShiftExpression 
RelationalExpression ::= RelationalExpression LE ShiftExpression 
RelationalExpression ::= RelationalExpression GT ShiftExpression 
RelationalExpression ::= RelationalExpression LT ShiftExpression 
RelationalExpression ::= ShiftExpression 
ShiftExpression ::= ShiftExpression RSHIFT AdditiveExpression 
ShiftExpression ::= ShiftExpression LSHIFT AdditiveExpression 
ShiftExpression ::= AdditiveExpression 
AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression 
AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression 
AdditiveExpression ::= MultiplicativeExpression 
MultiplicativeExpression ::= MultiplicativeExpression MODULUS CastExpression 
MultiplicativeExpression ::= MultiplicativeExpression DIVIDE CastExpression 
MultiplicativeExpression ::= MultiplicativeExpression TIMES CastExpression 
MultiplicativeExpression ::= CastExpression 
CastExpression ::= LPAREN TypeName RPAREN CastExpression 
CastExpression ::= UnaryExpression 
UnaryOperator ::= NOT 
UnaryOperator ::= TILDE 
UnaryOperator ::= MINUS 
UnaryOperator ::= PLUS 
UnaryOperator ::= TIMES 
UnaryOperator ::= BITWISEAND 
UnaryExpression ::= SIZEOF LPAREN TypeName RPAREN 
UnaryExpression ::= SIZEOF UnaryExpression 
UnaryExpression ::= UnaryOperator CastExpression 
UnaryExpression ::= DECREMENT UnaryExpression 
UnaryExpression ::= INCREMENT UnaryExpression 
UnaryExpression ::= PostfixExpression 
ArgumentExpressionList ::= ArgumentExpressionList COMMA AssignmentExpression 
ArgumentExpressionList ::= AssignmentExpression 
ArgumentExpressionListOpt ::= ArgumentExpressionList 
ArgumentExpressionListOpt ::= 
PostfixExpression ::= PostfixExpression DECREMENT 
PostfixExpression ::= PostfixExpression INCREMENT 
PostfixExpression ::= PostfixExpression ARROW ID 
PostfixExpression ::= PostfixExpression PERIOD ID 
PostfixExpression ::= PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN 
PostfixExpression ::= PostfixExpression LBRACK Expression RBRACK 
PostfixExpression ::= PrimaryExpression 
Constant ::= CHAR_LITERAL 
Constant ::= DECIMAL_LITERAL 
PrimaryExpression ::= LPAREN Expression RPAREN 
PrimaryExpression ::= STRING_LITERAL 
PrimaryExpression ::= Constant 
PrimaryExpression ::= ID 
Var ::= ID 
Exp ::= Var 
Exp ::= error 
$START ::= DeclarationListOpt EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [DeclarationListOpt ::= (*) DeclarationList , {EOF }]
  [declaration ::= (*) FUN bitfield_list type name parameters CompoundStatement , {EOF FUN VAR TYPEDEF ENUM CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) EXTERN , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [DeclarationList ::= (*) declaration , {EOF }]
  [declaration ::= (*) bitfield_list struct_or_union name struct_or_union_declarator , {EOF FUN VAR TYPEDEF ENUM CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) CONST , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) REGISTER , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) FUN bitfield_list type name type_parameters SEMICOLON , {EOF FUN VAR TYPEDEF ENUM CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= (*) , {STRUCT UNION }]
  [bitfield_value ::= (*) STATIC , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [DeclarationListOpt ::= (*) , {EOF }]
  [DeclarationList ::= (*) declaration DeclarationList , {EOF }]
  [declaration ::= (*) VAR bitfield_list type name initialization SEMICOLON , {EOF FUN VAR TYPEDEF ENUM CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) ENUM ID LBRACE enumerator_list RBRACE , {EOF FUN VAR TYPEDEF ENUM CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) VOLATILE , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) TYPEDEF type name SEMICOLON , {EOF FUN VAR TYPEDEF ENUM CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {STRUCT UNION }]
  [bitfield_value ::= (*) AUTO , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [$START ::= (*) DeclarationListOpt EOF , {EOF }]
}
transition on CONST to state [15]
transition on bitfield_list to state [14]
transition on AUTO to state [13]
transition on bitfield_value to state [12]
transition on VOLATILE to state [11]
transition on EXTERN to state [10]
transition on VAR to state [9]
transition on TYPEDEF to state [8]
transition on DeclarationList to state [7]
transition on REGISTER to state [6]
transition on FUN to state [5]
transition on STATIC to state [4]
transition on declaration to state [3]
transition on ENUM to state [2]
transition on DeclarationListOpt to state [1]

-------------------
lalr_state [1]: {
  [$START ::= DeclarationListOpt (*) EOF , {EOF }]
}
transition on EOF to state [289]

-------------------
lalr_state [2]: {
  [declaration ::= ENUM (*) ID LBRACE enumerator_list RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on ID to state [279]

-------------------
lalr_state [3]: {
  [declaration ::= (*) FUN bitfield_list type name parameters CompoundStatement , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) EXTERN , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [DeclarationList ::= declaration (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [DeclarationList ::= (*) declaration , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [declaration ::= (*) bitfield_list struct_or_union name struct_or_union_declarator , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) CONST , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) REGISTER , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) FUN bitfield_list type name type_parameters SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= (*) , {STRUCT UNION }]
  [bitfield_value ::= (*) STATIC , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [DeclarationList ::= declaration (*) DeclarationList , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [DeclarationList ::= (*) declaration DeclarationList , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [declaration ::= (*) VAR bitfield_list type name initialization SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) ENUM ID LBRACE enumerator_list RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) VOLATILE , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) TYPEDEF type name SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {STRUCT UNION }]
  [bitfield_value ::= (*) AUTO , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on CONST to state [15]
transition on bitfield_list to state [14]
transition on AUTO to state [13]
transition on bitfield_value to state [12]
transition on VOLATILE to state [11]
transition on EXTERN to state [10]
transition on VAR to state [9]
transition on TYPEDEF to state [8]
transition on DeclarationList to state [278]
transition on REGISTER to state [6]
transition on FUN to state [5]
transition on STATIC to state [4]
transition on declaration to state [3]
transition on ENUM to state [2]

-------------------
lalr_state [4]: {
  [bitfield_value ::= STATIC (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [5]: {
  [bitfield_value ::= (*) REGISTER , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_value ::= (*) EXTERN , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [declaration ::= FUN (*) bitfield_list type name type_parameters SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) AUTO , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_value ::= (*) VOLATILE , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_list ::= (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [declaration ::= FUN (*) bitfield_list type name parameters CompoundStatement , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) STATIC , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_value ::= (*) CONST , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
}
transition on bitfield_value to state [12]
transition on EXTERN to state [10]
transition on AUTO to state [13]
transition on REGISTER to state [6]
transition on bitfield_list to state [194]
transition on STATIC to state [4]
transition on VOLATILE to state [11]
transition on CONST to state [15]

-------------------
lalr_state [6]: {
  [bitfield_value ::= REGISTER (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [7]: {
  [DeclarationListOpt ::= DeclarationList (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [8]: {
  [TypeName ::= (*) VOID , {ID LBRACK TIMES }]
  [TypeName ::= (*) CHAR , {ID LBRACK TIMES }]
  [TypeName ::= (*) INT , {ID LBRACK TIMES }]
  [type ::= (*) TypeName , {ID }]
  [TypeName ::= (*) ENUM , {ID LBRACK TIMES }]
  [TypeName ::= (*) SHORT , {ID LBRACK TIMES }]
  [TypeName ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type ::= (*) TypeName type_augments , {ID }]
  [TypeName ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [TypeName ::= (*) LONG , {ID LBRACK TIMES }]
  [TypeName ::= (*) FLOAT , {ID LBRACK TIMES }]
  [declaration ::= TYPEDEF (*) type name SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on SHORT to state [33]
transition on CHAR to state [32]
transition on FLOAT to state [31]
transition on type to state [191]
transition on DOUBLE to state [29]
transition on TypeName to state [27]
transition on VOID to state [26]
transition on LONG to state [25]
transition on INT to state [24]
transition on ENUM to state [23]

-------------------
lalr_state [9]: {
  [bitfield_value ::= (*) REGISTER , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_value ::= (*) EXTERN , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [bitfield_value ::= (*) AUTO , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_value ::= (*) VOLATILE , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_list ::= (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [bitfield_value ::= (*) STATIC , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [bitfield_value ::= (*) CONST , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER }]
  [declaration ::= VAR (*) bitfield_list type name initialization SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on bitfield_value to state [12]
transition on EXTERN to state [10]
transition on AUTO to state [13]
transition on REGISTER to state [6]
transition on STATIC to state [4]
transition on bitfield_list to state [62]
transition on VOLATILE to state [11]
transition on CONST to state [15]

-------------------
lalr_state [10]: {
  [bitfield_value ::= EXTERN (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [11]: {
  [bitfield_value ::= VOLATILE (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [12]: {
  [bitfield_value ::= (*) REGISTER , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= bitfield_value (*) bitfield_list , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR STRUCT UNION }]
  [bitfield_value ::= (*) EXTERN , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR STRUCT UNION }]
  [bitfield_value ::= (*) AUTO , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) VOLATILE , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR STRUCT UNION }]
  [bitfield_value ::= (*) STATIC , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) CONST , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on bitfield_value to state [12]
transition on EXTERN to state [10]
transition on AUTO to state [13]
transition on REGISTER to state [6]
transition on bitfield_list to state [61]
transition on STATIC to state [4]
transition on VOLATILE to state [11]
transition on CONST to state [15]

-------------------
lalr_state [13]: {
  [bitfield_value ::= AUTO (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [14]: {
  [struct_or_union ::= (*) UNION , {ID }]
  [declaration ::= bitfield_list (*) struct_or_union name struct_or_union_declarator , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [struct_or_union ::= (*) STRUCT , {ID }]
}
transition on UNION to state [18]
transition on STRUCT to state [17]
transition on struct_or_union to state [16]

-------------------
lalr_state [15]: {
  [bitfield_value ::= CONST (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [16]: {
  [declaration ::= bitfield_list struct_or_union (*) name struct_or_union_declarator , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [name ::= (*) ID , {LBRACE }]
}
transition on name to state [20]
transition on ID to state [19]

-------------------
lalr_state [17]: {
  [struct_or_union ::= STRUCT (*) , {ID }]
}

-------------------
lalr_state [18]: {
  [struct_or_union ::= UNION (*) , {ID }]
}

-------------------
lalr_state [19]: {
  [name ::= ID (*) , {COMMA SEMICOLON LPAREN RPAREN LBRACE ASSIGN }]
}

-------------------
lalr_state [20]: {
  [struct_or_union_declarator ::= (*) LBRACE struct_declaration_list RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= bitfield_list struct_or_union name (*) struct_or_union_declarator , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on struct_or_union_declarator to state [22]
transition on LBRACE to state [21]

-------------------
lalr_state [21]: {
  [TypeName ::= (*) VOID , {ID LBRACK TIMES }]
  [TypeName ::= (*) CHAR , {ID LBRACK TIMES }]
  [TypeName ::= (*) INT , {ID LBRACK TIMES }]
  [type ::= (*) TypeName , {ID }]
  [TypeName ::= (*) ENUM , {ID LBRACK TIMES }]
  [TypeName ::= (*) SHORT , {ID LBRACK TIMES }]
  [TypeName ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [struct_declaration_list ::= (*) struct_declaration_list type name SEMICOLON , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [type ::= (*) TypeName type_augments , {ID }]
  [struct_or_union_declarator ::= LBRACE (*) struct_declaration_list RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [TypeName ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [TypeName ::= (*) LONG , {ID LBRACK TIMES }]
  [TypeName ::= (*) FLOAT , {ID LBRACK TIMES }]
  [struct_declaration_list ::= (*) type name SEMICOLON , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on SHORT to state [33]
transition on CHAR to state [32]
transition on FLOAT to state [31]
transition on type to state [30]
transition on DOUBLE to state [29]
transition on struct_declaration_list to state [28]
transition on TypeName to state [27]
transition on VOID to state [26]
transition on LONG to state [25]
transition on INT to state [24]
transition on ENUM to state [23]

-------------------
lalr_state [22]: {
  [declaration ::= bitfield_list struct_or_union name struct_or_union_declarator (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [23]: {
  [TypeName ::= ENUM (*) ID , {ID COMMA RPAREN LBRACK TIMES }]
  [TypeName ::= ENUM (*) , {ID COMMA RPAREN LBRACK TIMES }]
}
transition on ID to state [60]

-------------------
lalr_state [24]: {
  [TypeName ::= INT (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [25]: {
  [TypeName ::= LONG (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [26]: {
  [TypeName ::= VOID (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [27]: {
  [empty_array_type ::= (*) LBRACK RBRACK , {ID COMMA RPAREN LBRACK }]
  [pointer_list ::= (*) TIMES , {ID COMMA RPAREN LBRACK TIMES }]
  [type ::= TypeName (*) , {ID COMMA RPAREN }]
  [type_augments ::= (*) pointer_list brackets_list , {ID COMMA RPAREN }]
  [expression_array_type_list ::= (*) expression_array_type_list expression_array_type , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= (*) empty_array_type_list empty_array_type , {ID COMMA RPAREN LBRACK }]
  [brackets_list ::= (*) expression_array_type_list , {ID COMMA RPAREN }]
  [type ::= TypeName (*) type_augments , {ID COMMA RPAREN }]
  [type_augments ::= (*) brackets_list , {ID COMMA RPAREN }]
  [expression_array_type_list ::= (*) expression_array_type , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= (*) empty_array_type , {ID COMMA RPAREN LBRACK }]
  [pointer_list ::= (*) pointer_list TIMES , {ID COMMA RPAREN LBRACK TIMES }]
  [brackets_list ::= (*) empty_array_type_list , {ID COMMA RPAREN }]
  [type_augments ::= (*) pointer_list , {ID COMMA RPAREN }]
  [expression_array_type ::= (*) LBRACK Constant RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on LBRACK to state [48]
transition on TIMES to state [47]
transition on empty_array_type_list to state [46]
transition on expression_array_type_list to state [45]
transition on brackets_list to state [44]
transition on type_augments to state [43]
transition on expression_array_type to state [42]
transition on pointer_list to state [41]
transition on empty_array_type to state [40]

-------------------
lalr_state [28]: {
  [TypeName ::= (*) VOID , {ID LBRACK TIMES }]
  [TypeName ::= (*) CHAR , {ID LBRACK TIMES }]
  [TypeName ::= (*) INT , {ID LBRACK TIMES }]
  [type ::= (*) TypeName , {ID }]
  [TypeName ::= (*) ENUM , {ID LBRACK TIMES }]
  [TypeName ::= (*) SHORT , {ID LBRACK TIMES }]
  [TypeName ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [struct_declaration_list ::= struct_declaration_list (*) type name SEMICOLON , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [struct_or_union_declarator ::= LBRACE struct_declaration_list (*) RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [type ::= (*) TypeName type_augments , {ID }]
  [TypeName ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [TypeName ::= (*) LONG , {ID LBRACK TIMES }]
  [TypeName ::= (*) FLOAT , {ID LBRACK TIMES }]
}
transition on SHORT to state [33]
transition on CHAR to state [32]
transition on FLOAT to state [31]
transition on RBRACE to state [37]
transition on type to state [36]
transition on DOUBLE to state [29]
transition on TypeName to state [27]
transition on VOID to state [26]
transition on LONG to state [25]
transition on INT to state [24]
transition on ENUM to state [23]

-------------------
lalr_state [29]: {
  [TypeName ::= DOUBLE (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [30]: {
  [struct_declaration_list ::= type (*) name SEMICOLON , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [name ::= (*) ID , {SEMICOLON }]
}
transition on name to state [34]
transition on ID to state [19]

-------------------
lalr_state [31]: {
  [TypeName ::= FLOAT (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [32]: {
  [TypeName ::= CHAR (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [33]: {
  [TypeName ::= SHORT (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [34]: {
  [struct_declaration_list ::= type name (*) SEMICOLON , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on SEMICOLON to state [35]

-------------------
lalr_state [35]: {
  [struct_declaration_list ::= type name SEMICOLON (*) , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}

-------------------
lalr_state [36]: {
  [struct_declaration_list ::= struct_declaration_list type (*) name SEMICOLON , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [name ::= (*) ID , {SEMICOLON }]
}
transition on name to state [38]
transition on ID to state [19]

-------------------
lalr_state [37]: {
  [struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [38]: {
  [struct_declaration_list ::= struct_declaration_list type name (*) SEMICOLON , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on SEMICOLON to state [39]

-------------------
lalr_state [39]: {
  [struct_declaration_list ::= struct_declaration_list type name SEMICOLON (*) , {INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}

-------------------
lalr_state [40]: {
  [empty_array_type_list ::= empty_array_type (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [41]: {
  [empty_array_type ::= (*) LBRACK RBRACK , {ID COMMA RPAREN LBRACK }]
  [type_augments ::= pointer_list (*) brackets_list , {ID COMMA RPAREN }]
  [expression_array_type_list ::= (*) expression_array_type_list expression_array_type , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= (*) empty_array_type_list empty_array_type , {ID COMMA RPAREN LBRACK }]
  [brackets_list ::= (*) expression_array_type_list , {ID COMMA RPAREN }]
  [expression_array_type_list ::= (*) expression_array_type , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= (*) empty_array_type , {ID COMMA RPAREN LBRACK }]
  [pointer_list ::= pointer_list (*) TIMES , {ID COMMA RPAREN LBRACK TIMES }]
  [type_augments ::= pointer_list (*) , {ID COMMA RPAREN }]
  [brackets_list ::= (*) empty_array_type_list , {ID COMMA RPAREN }]
  [expression_array_type ::= (*) LBRACK Constant RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on expression_array_type_list to state [45]
transition on TIMES to state [59]
transition on empty_array_type to state [40]
transition on LBRACK to state [48]
transition on expression_array_type to state [42]
transition on brackets_list to state [58]
transition on empty_array_type_list to state [46]

-------------------
lalr_state [42]: {
  [expression_array_type_list ::= expression_array_type (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [43]: {
  [type ::= TypeName type_augments (*) , {ID COMMA RPAREN }]
}

-------------------
lalr_state [44]: {
  [type_augments ::= brackets_list (*) , {ID COMMA RPAREN }]
}

-------------------
lalr_state [45]: {
  [expression_array_type_list ::= expression_array_type_list (*) expression_array_type , {ID COMMA RPAREN LBRACK }]
  [brackets_list ::= expression_array_type_list (*) , {ID COMMA RPAREN }]
  [expression_array_type ::= (*) LBRACK Constant RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on LBRACK to state [57]
transition on expression_array_type to state [56]

-------------------
lalr_state [46]: {
  [empty_array_type_list ::= empty_array_type_list (*) empty_array_type , {ID COMMA RPAREN LBRACK }]
  [brackets_list ::= empty_array_type_list (*) , {ID COMMA RPAREN }]
  [empty_array_type ::= (*) LBRACK RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on empty_array_type to state [55]
transition on LBRACK to state [54]

-------------------
lalr_state [47]: {
  [pointer_list ::= TIMES (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [48]: {
  [Constant ::= (*) DECIMAL_LITERAL , {RBRACK }]
  [Constant ::= (*) CHAR_LITERAL , {RBRACK }]
  [expression_array_type ::= LBRACK (*) Constant RBRACK , {ID COMMA RPAREN LBRACK }]
  [empty_array_type ::= LBRACK (*) RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on Constant to state [52]
transition on CHAR_LITERAL to state [51]
transition on DECIMAL_LITERAL to state [50]
transition on RBRACK to state [49]

-------------------
lalr_state [49]: {
  [empty_array_type ::= LBRACK RBRACK (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [50]: {
  [Constant ::= DECIMAL_LITERAL (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [51]: {
  [Constant ::= CHAR_LITERAL (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [52]: {
  [expression_array_type ::= LBRACK Constant (*) RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on RBRACK to state [53]

-------------------
lalr_state [53]: {
  [expression_array_type ::= LBRACK Constant RBRACK (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [54]: {
  [empty_array_type ::= LBRACK (*) RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on RBRACK to state [49]

-------------------
lalr_state [55]: {
  [empty_array_type_list ::= empty_array_type_list empty_array_type (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [56]: {
  [expression_array_type_list ::= expression_array_type_list expression_array_type (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [57]: {
  [Constant ::= (*) DECIMAL_LITERAL , {RBRACK }]
  [Constant ::= (*) CHAR_LITERAL , {RBRACK }]
  [expression_array_type ::= LBRACK (*) Constant RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on Constant to state [52]
transition on CHAR_LITERAL to state [51]
transition on DECIMAL_LITERAL to state [50]

-------------------
lalr_state [58]: {
  [type_augments ::= pointer_list brackets_list (*) , {ID COMMA RPAREN }]
}

-------------------
lalr_state [59]: {
  [pointer_list ::= pointer_list TIMES (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [60]: {
  [TypeName ::= ENUM ID (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [61]: {
  [bitfield_list ::= bitfield_value bitfield_list (*) , {INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR STRUCT UNION }]
}

-------------------
lalr_state [62]: {
  [TypeName ::= (*) VOID , {ID LBRACK TIMES }]
  [TypeName ::= (*) CHAR , {ID LBRACK TIMES }]
  [TypeName ::= (*) INT , {ID LBRACK TIMES }]
  [type ::= (*) TypeName , {ID }]
  [TypeName ::= (*) ENUM , {ID LBRACK TIMES }]
  [TypeName ::= (*) SHORT , {ID LBRACK TIMES }]
  [TypeName ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type ::= (*) TypeName type_augments , {ID }]
  [TypeName ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [TypeName ::= (*) LONG , {ID LBRACK TIMES }]
  [TypeName ::= (*) FLOAT , {ID LBRACK TIMES }]
  [declaration ::= VAR bitfield_list (*) type name initialization SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on SHORT to state [33]
transition on CHAR to state [32]
transition on FLOAT to state [31]
transition on type to state [63]
transition on DOUBLE to state [29]
transition on TypeName to state [27]
transition on VOID to state [26]
transition on LONG to state [25]
transition on INT to state [24]
transition on ENUM to state [23]

-------------------
lalr_state [63]: {
  [declaration ::= VAR bitfield_list type (*) name initialization SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [name ::= (*) ID , {SEMICOLON ASSIGN }]
}
transition on name to state [64]
transition on ID to state [19]

-------------------
lalr_state [64]: {
  [initialization ::= (*) ASSIGN initializer , {SEMICOLON }]
  [declaration ::= VAR bitfield_list type name (*) initialization SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [initialization ::= (*) , {SEMICOLON }]
}
transition on ASSIGN to state [66]
transition on initialization to state [65]

-------------------
lalr_state [65]: {
  [declaration ::= VAR bitfield_list type name initialization (*) SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on SEMICOLON to state [190]

-------------------
lalr_state [66]: {
  [initializer ::= (*) LBRACE initializer_list RBRACE , {SEMICOLON }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {SEMICOLON AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {SEMICOLON AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {SEMICOLON OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {SEMICOLON }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {SEMICOLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {SEMICOLON OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [initializer ::= (*) AssignmentExpression , {SEMICOLON }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {SEMICOLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [initialization ::= ASSIGN (*) initializer , {SEMICOLON }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {SEMICOLON }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [98]
transition on initializer to state [97]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LBRACE to state [82]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [67]: {
  [UnaryOperator ::= TIMES (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [68]: {
  [PostfixExpression ::= PostfixExpression (*) DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= PostfixExpression (*) PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= PostfixExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= PostfixExpression (*) INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= PostfixExpression (*) LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= PostfixExpression (*) ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= PostfixExpression (*) LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on PERIOD to state [179]
transition on LPAREN to state [178]
transition on INCREMENT to state [177]
transition on ARROW to state [176]
transition on LBRACK to state [175]
transition on DECREMENT to state [174]

-------------------
lalr_state [69]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= SIZEOF (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= SIZEOF (*) LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [171]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [170]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [70]: {
  [LogicalAndExpression ::= InclusiveOrExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [InclusiveOrExpression ::= InclusiveOrExpression (*) BWISEOR ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
}
transition on BWISEOR to state [151]

-------------------
lalr_state [71]: {
  [UnaryOperator ::= PLUS (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [72]: {
  [InclusiveOrExpression ::= ExclusiveOrExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [ExclusiveOrExpression ::= ExclusiveOrExpression (*) BWISEXOR AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
}
transition on BWISEXOR to state [153]

-------------------
lalr_state [73]: {
  [AndExpression ::= AndExpression (*) BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExclusiveOrExpression ::= AndExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
}
transition on BITWISEAND to state [155]

-------------------
lalr_state [74]: {
  [PrimaryExpression ::= Constant (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [75]: {
  [PostfixExpression ::= PrimaryExpression (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [76]: {
  [MultiplicativeExpression ::= CastExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [77]: {
  [UnaryOperator ::= NOT (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [78]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= DECREMENT (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [169]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [126]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [79]: {
  [UnaryOperator ::= BITWISEAND (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [80]: {
  [LogicalAndExpression ::= LogicalAndExpression (*) AND InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [LogicalOrExpression ::= LogicalAndExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE OR QUESTION }]
}
transition on AND to state [149]

-------------------
lalr_state [81]: {
  [TypeName ::= (*) ENUM ID , {RPAREN }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [TypeName ::= (*) ENUM , {RPAREN }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [TypeName ::= (*) INT , {RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [TypeName ::= (*) FLOAT , {RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) DOUBLE , {RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) CHAR , {RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) LONG , {RPAREN }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA RPAREN }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) SHORT , {RPAREN }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= LPAREN (*) Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA RPAREN }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) VOID , {RPAREN }]
  [CastExpression ::= LPAREN (*) TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on RelationalExpression to state [91]
transition on LONG to state [25]
transition on Expression to state [128]
transition on DECIMAL_LITERAL to state [50]
transition on FLOAT to state [31]
transition on UnaryOperator to state [85]
transition on ENUM to state [23]
transition on LogicalOrExpression to state [88]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on VOID to state [26]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on MultiplicativeExpression to state [96]
transition on ID to state [83]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on DECREMENT to state [78]
transition on MINUS to state [94]
transition on INT to state [24]
transition on LPAREN to state [81]
transition on TypeName to state [166]
transition on BITWISEAND to state [79]
transition on DOUBLE to state [29]
transition on CHAR_LITERAL to state [51]
transition on CHAR to state [32]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on SHORT to state [33]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [82]: {
  [initializer ::= (*) LBRACE initializer_list RBRACE , {COMMA RBRACE }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RBRACE }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [initializer_list ::= (*) initializer , {COMMA RBRACE }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RBRACE }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RBRACE OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [initializer_list ::= (*) initializer_list COMMA initializer , {COMMA RBRACE }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RBRACE }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RBRACE OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [initializer ::= (*) AssignmentExpression , {COMMA RBRACE }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RBRACE }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [initializer ::= LBRACE (*) initializer_list RBRACE , {COMMA SEMICOLON RBRACE }]
}
transition on AssignmentExpression to state [98]
transition on initializer to state [162]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on initializer_list to state [161]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LBRACE to state [82]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [83]: {
  [PrimaryExpression ::= ID (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [84]: {
  [ShiftExpression ::= ShiftExpression (*) LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= ShiftExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= ShiftExpression (*) RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on RSHIFT to state [119]
transition on LSHIFT to state [118]

-------------------
lalr_state [85]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= UnaryOperator (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [160]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [86]: {
  [UnaryOperator ::= TILDE (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [87]: {
  [PrimaryExpression ::= STRING_LITERAL (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [88]: {
  [LogicalOrExpression ::= LogicalOrExpression (*) OR LogicalAndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE OR QUESTION }]
  [ConditionalExpression ::= LogicalOrExpression (*) QUESTION Expression COLON ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [ConditionalExpression ::= LogicalOrExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
}
transition on OR to state [147]
transition on QUESTION to state [146]

-------------------
lalr_state [89]: {
  [AssignmentOperator ::= (*) LSHIFTASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) MODASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) SUBASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= UnaryExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AssignmentOperator ::= (*) BWISEORASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) BWISEXORASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) DIVASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) ADDASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) RSHIFTASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) BWISEANDASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) MULASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentOperator ::= (*) ASSIGN , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [AssignmentExpression ::= UnaryExpression (*) AssignmentOperator AssignmentExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
}
transition on MODASSIGN to state [144]
transition on DIVASSIGN to state [143]
transition on RSHIFTASSIGN to state [142]
transition on ASSIGN to state [141]
transition on BWISEXORASSIGN to state [140]
transition on ADDASSIGN to state [139]
transition on LSHIFTASSIGN to state [138]
transition on SUBASSIGN to state [137]
transition on AssignmentOperator to state [136]
transition on BWISEORASSIGN to state [135]
transition on BWISEANDASSIGN to state [134]
transition on MULASSIGN to state [133]

-------------------
lalr_state [90]: {
  [AssignmentExpression ::= ConditionalExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
}

-------------------
lalr_state [91]: {
  [RelationalExpression ::= RelationalExpression (*) GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= RelationalExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on GE to state [116]
transition on LE to state [115]
transition on GT to state [114]
transition on LT to state [113]

-------------------
lalr_state [92]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= INCREMENT (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [127]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [126]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [93]: {
  [EqualityExpression ::= EqualityExpression (*) EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= EqualityExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= EqualityExpression (*) NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on NEQ to state [111]
transition on EQ to state [110]

-------------------
lalr_state [94]: {
  [UnaryOperator ::= MINUS (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [95]: {
  [AdditiveExpression ::= AdditiveExpression (*) PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= AdditiveExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= AdditiveExpression (*) MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on MINUS to state [107]
transition on PLUS to state [106]

-------------------
lalr_state [96]: {
  [MultiplicativeExpression ::= MultiplicativeExpression (*) MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= MultiplicativeExpression (*) DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= MultiplicativeExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= MultiplicativeExpression (*) TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on TIMES to state [101]
transition on MODULUS to state [100]
transition on DIVIDE to state [99]

-------------------
lalr_state [97]: {
  [initialization ::= ASSIGN initializer (*) , {SEMICOLON }]
}

-------------------
lalr_state [98]: {
  [initializer ::= AssignmentExpression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [99]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= MultiplicativeExpression DIVIDE (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [105]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [100]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= MultiplicativeExpression MODULUS (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [104]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [101]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= MultiplicativeExpression TIMES (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [102]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [102]: {
  [MultiplicativeExpression ::= MultiplicativeExpression TIMES CastExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [103]: {
  [CastExpression ::= UnaryExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [104]: {
  [MultiplicativeExpression ::= MultiplicativeExpression MODULUS CastExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [105]: {
  [MultiplicativeExpression ::= MultiplicativeExpression DIVIDE CastExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [106]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= AdditiveExpression PLUS (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [109]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [76]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [107]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= AdditiveExpression MINUS (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [108]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [76]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [108]: {
  [MultiplicativeExpression ::= MultiplicativeExpression (*) MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= MultiplicativeExpression (*) DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= MultiplicativeExpression (*) TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on TIMES to state [101]
transition on MODULUS to state [100]
transition on DIVIDE to state [99]

-------------------
lalr_state [109]: {
  [MultiplicativeExpression ::= MultiplicativeExpression (*) MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= MultiplicativeExpression (*) DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= MultiplicativeExpression (*) TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on TIMES to state [101]
transition on MODULUS to state [100]
transition on DIVIDE to state [99]

-------------------
lalr_state [110]: {
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= EqualityExpression EQ (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [125]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [84]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [111]: {
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= EqualityExpression NEQ (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [112]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [84]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [112]: {
  [RelationalExpression ::= RelationalExpression (*) GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= EqualityExpression NEQ RelationalExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on GE to state [116]
transition on LE to state [115]
transition on GT to state [114]
transition on LT to state [113]

-------------------
lalr_state [113]: {
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= RelationalExpression LT (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [124]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [114]: {
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= RelationalExpression GT (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [123]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [115]: {
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= RelationalExpression LE (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [122]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [116]: {
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= RelationalExpression GE (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [117]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [117]: {
  [ShiftExpression ::= ShiftExpression (*) LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression GE ShiftExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= ShiftExpression (*) RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on RSHIFT to state [119]
transition on LSHIFT to state [118]

-------------------
lalr_state [118]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ShiftExpression ::= ShiftExpression LSHIFT (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [121]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [76]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [119]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ShiftExpression ::= ShiftExpression RSHIFT (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [120]
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [76]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [120]: {
  [AdditiveExpression ::= AdditiveExpression (*) PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= ShiftExpression RSHIFT AdditiveExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= AdditiveExpression (*) MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on MINUS to state [107]
transition on PLUS to state [106]

-------------------
lalr_state [121]: {
  [ShiftExpression ::= ShiftExpression LSHIFT AdditiveExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= AdditiveExpression (*) PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= AdditiveExpression (*) MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on MINUS to state [107]
transition on PLUS to state [106]

-------------------
lalr_state [122]: {
  [RelationalExpression ::= RelationalExpression LE ShiftExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= ShiftExpression (*) LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= ShiftExpression (*) RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on RSHIFT to state [119]
transition on LSHIFT to state [118]

-------------------
lalr_state [123]: {
  [ShiftExpression ::= ShiftExpression (*) LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression GT ShiftExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= ShiftExpression (*) RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on RSHIFT to state [119]
transition on LSHIFT to state [118]

-------------------
lalr_state [124]: {
  [ShiftExpression ::= ShiftExpression (*) LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= ShiftExpression (*) RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression LT ShiftExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on RSHIFT to state [119]
transition on LSHIFT to state [118]

-------------------
lalr_state [125]: {
  [RelationalExpression ::= RelationalExpression (*) GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= EqualityExpression EQ RelationalExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= RelationalExpression (*) GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on GE to state [116]
transition on LE to state [115]
transition on GT to state [114]
transition on LT to state [113]

-------------------
lalr_state [126]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA RPAREN }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= LPAREN (*) Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [128]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [127]: {
  [UnaryExpression ::= INCREMENT UnaryExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [128]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA RPAREN }]
  [PrimaryExpression ::= LPAREN Expression (*) RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on RPAREN to state [131]
transition on COMMA to state [130]

-------------------
lalr_state [129]: {
  [Expression ::= AssignmentExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK }]
}

-------------------
lalr_state [130]: {
  [Expression ::= Expression COMMA (*) AssignmentExpression , {COMMA COLON SEMICOLON RPAREN RBRACK }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA COLON SEMICOLON RPAREN RBRACK }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [132]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [131]: {
  [PrimaryExpression ::= LPAREN Expression RPAREN (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [132]: {
  [Expression ::= Expression COMMA AssignmentExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK }]
}

-------------------
lalr_state [133]: {
  [AssignmentOperator ::= MULASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [134]: {
  [AssignmentOperator ::= BWISEANDASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [135]: {
  [AssignmentOperator ::= BWISEORASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [136]: {
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= UnaryExpression AssignmentOperator (*) AssignmentExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [145]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [137]: {
  [AssignmentOperator ::= SUBASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [138]: {
  [AssignmentOperator ::= LSHIFTASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [139]: {
  [AssignmentOperator ::= ADDASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [140]: {
  [AssignmentOperator ::= BWISEXORASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [141]: {
  [AssignmentOperator ::= ASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [142]: {
  [AssignmentOperator ::= RSHIFTASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [143]: {
  [AssignmentOperator ::= DIVASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [144]: {
  [AssignmentOperator ::= MODASSIGN (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}

-------------------
lalr_state [145]: {
  [AssignmentExpression ::= UnaryExpression AssignmentOperator AssignmentExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
}

-------------------
lalr_state [146]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA COLON }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA COLON AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= LogicalOrExpression QUESTION (*) Expression COLON ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA COLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA COLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA COLON AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA COLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA COLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA COLON OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA COLON }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA COLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA COLON OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA COLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA COLON }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA COLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA COLON }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA COLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [157]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [147]: {
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= LogicalOrExpression OR (*) LogicalAndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [148]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [148]: {
  [LogicalAndExpression ::= LogicalAndExpression (*) AND InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [LogicalOrExpression ::= LogicalOrExpression OR LogicalAndExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE OR QUESTION }]
}
transition on AND to state [149]

-------------------
lalr_state [149]: {
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= LogicalAndExpression AND (*) InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on PLUS to state [71]
transition on ExclusiveOrExpression to state [72]
transition on InclusiveOrExpression to state [150]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [150]: {
  [InclusiveOrExpression ::= InclusiveOrExpression (*) BWISEOR ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [LogicalAndExpression ::= LogicalAndExpression AND InclusiveOrExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
}
transition on BWISEOR to state [151]

-------------------
lalr_state [151]: {
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= InclusiveOrExpression BWISEOR (*) ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [84]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on PLUS to state [71]
transition on ExclusiveOrExpression to state [152]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [152]: {
  [ExclusiveOrExpression ::= ExclusiveOrExpression (*) BWISEXOR AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [InclusiveOrExpression ::= InclusiveOrExpression BWISEOR ExclusiveOrExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
}
transition on BWISEXOR to state [153]

-------------------
lalr_state [153]: {
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExclusiveOrExpression ::= ExclusiveOrExpression BWISEXOR (*) AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [84]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [154]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [154]: {
  [AndExpression ::= AndExpression (*) BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExclusiveOrExpression ::= ExclusiveOrExpression BWISEXOR AndExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
}
transition on BITWISEAND to state [155]

-------------------
lalr_state [155]: {
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AndExpression ::= AndExpression BITWISEAND (*) EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [156]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ShiftExpression to state [84]
transition on UnaryOperator to state [85]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [156]: {
  [AndExpression ::= AndExpression BITWISEAND EqualityExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= EqualityExpression (*) EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= EqualityExpression (*) NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
}
transition on NEQ to state [111]
transition on EQ to state [110]

-------------------
lalr_state [157]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA COLON }]
  [ConditionalExpression ::= LogicalOrExpression QUESTION Expression (*) COLON ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
}
transition on COLON to state [158]
transition on COMMA to state [130]

-------------------
lalr_state [158]: {
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= LogicalOrExpression QUESTION Expression COLON (*) ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT ARROW DECREMENT INCREMENT BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [159]
transition on UnaryExpression to state [103]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [159]: {
  [ConditionalExpression ::= LogicalOrExpression QUESTION Expression COLON ConditionalExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE }]
}

-------------------
lalr_state [160]: {
  [UnaryExpression ::= UnaryOperator CastExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [161]: {
  [initializer_list ::= initializer_list (*) COMMA initializer , {COMMA RBRACE }]
  [initializer ::= LBRACE initializer_list (*) RBRACE , {COMMA SEMICOLON RBRACE }]
}
transition on RBRACE to state [164]
transition on COMMA to state [163]

-------------------
lalr_state [162]: {
  [initializer_list ::= initializer (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [163]: {
  [initializer ::= (*) LBRACE initializer_list RBRACE , {COMMA RBRACE }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RBRACE }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RBRACE AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RBRACE }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RBRACE AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RBRACE OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RBRACE EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [initializer_list ::= initializer_list COMMA (*) initializer , {COMMA RBRACE }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RBRACE }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RBRACE OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [initializer ::= (*) AssignmentExpression , {COMMA RBRACE }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RBRACE AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RBRACE PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RBRACE }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RBRACE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RBRACE EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN LBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [98]
transition on initializer to state [165]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LBRACE to state [82]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [164]: {
  [initializer ::= LBRACE initializer_list RBRACE (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [165]: {
  [initializer_list ::= initializer_list COMMA initializer (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [166]: {
  [CastExpression ::= LPAREN TypeName (*) RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on RPAREN to state [167]

-------------------
lalr_state [167]: {
  [PrimaryExpression ::= (*) Constant , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CastExpression ::= LPAREN TypeName RPAREN (*) CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
}
transition on MINUS to state [94]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on UnaryExpression to state [103]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on ID to state [83]
transition on UnaryOperator to state [85]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on CastExpression to state [168]
transition on NOT to state [77]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on PLUS to state [71]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [168]: {
  [CastExpression ::= LPAREN TypeName RPAREN CastExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [169]: {
  [UnaryExpression ::= DECREMENT UnaryExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [170]: {
  [TypeName ::= (*) ENUM ID , {RPAREN }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [TypeName ::= (*) ENUM , {RPAREN }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [TypeName ::= (*) INT , {RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [TypeName ::= (*) FLOAT , {RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) DOUBLE , {RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) CHAR , {RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) LONG , {RPAREN }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA RPAREN }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) SHORT , {RPAREN }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= LPAREN (*) Expression RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA RPAREN }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [TypeName ::= (*) VOID , {RPAREN }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= SIZEOF LPAREN (*) TypeName RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on RelationalExpression to state [91]
transition on LONG to state [25]
transition on Expression to state [128]
transition on DECIMAL_LITERAL to state [50]
transition on FLOAT to state [31]
transition on UnaryOperator to state [85]
transition on ENUM to state [23]
transition on LogicalOrExpression to state [88]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on VOID to state [26]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on MultiplicativeExpression to state [96]
transition on ID to state [83]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on DECREMENT to state [78]
transition on MINUS to state [94]
transition on INT to state [24]
transition on LPAREN to state [81]
transition on TypeName to state [172]
transition on BITWISEAND to state [79]
transition on DOUBLE to state [29]
transition on CHAR_LITERAL to state [51]
transition on CHAR to state [32]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on SHORT to state [33]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [171]: {
  [UnaryExpression ::= SIZEOF UnaryExpression (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [172]: {
  [UnaryExpression ::= SIZEOF LPAREN TypeName (*) RPAREN , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on RPAREN to state [173]

-------------------
lalr_state [173]: {
  [UnaryExpression ::= SIZEOF LPAREN TypeName RPAREN (*) , {COMMA COLON SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [174]: {
  [PostfixExpression ::= PostfixExpression DECREMENT (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [175]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA RBRACK }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RBRACK AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RBRACK EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RBRACK PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RBRACK }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RBRACK AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RBRACK AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RBRACK EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RBRACK EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RBRACK }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RBRACK AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= PostfixExpression LBRACK (*) Expression RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RBRACK OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RBRACK EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RBRACK EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RBRACK }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RBRACK AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RBRACK PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RBRACK OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RBRACK AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RBRACK EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA RBRACK }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RBRACK AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RBRACK PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RBRACK }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RBRACK AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RBRACK EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN LBRACK RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [188]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [176]: {
  [PostfixExpression ::= PostfixExpression ARROW (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on ID to state [187]

-------------------
lalr_state [177]: {
  [PostfixExpression ::= PostfixExpression INCREMENT (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [178]: {
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ArgumentExpressionList ::= (*) AssignmentExpression , {COMMA RPAREN }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ArgumentExpressionList ::= (*) ArgumentExpressionList COMMA AssignmentExpression , {COMMA RPAREN }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= PostfixExpression LPAREN (*) ArgumentExpressionListOpt RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ArgumentExpressionListOpt ::= (*) , {RPAREN }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [ArgumentExpressionListOpt ::= (*) ArgumentExpressionList , {RPAREN }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [183]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on ArgumentExpressionListOpt to state [182]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on ArgumentExpressionList to state [181]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [179]: {
  [PostfixExpression ::= PostfixExpression PERIOD (*) ID , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on ID to state [180]

-------------------
lalr_state [180]: {
  [PostfixExpression ::= PostfixExpression PERIOD ID (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [181]: {
  [ArgumentExpressionListOpt ::= ArgumentExpressionList (*) , {RPAREN }]
  [ArgumentExpressionList ::= ArgumentExpressionList (*) COMMA AssignmentExpression , {COMMA RPAREN }]
}
transition on COMMA to state [185]

-------------------
lalr_state [182]: {
  [PostfixExpression ::= PostfixExpression LPAREN ArgumentExpressionListOpt (*) RPAREN , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on RPAREN to state [184]

-------------------
lalr_state [183]: {
  [ArgumentExpressionList ::= AssignmentExpression (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [184]: {
  [PostfixExpression ::= PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [185]: {
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ArgumentExpressionList ::= ArgumentExpressionList COMMA (*) AssignmentExpression , {COMMA RPAREN }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [186]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [186]: {
  [ArgumentExpressionList ::= ArgumentExpressionList COMMA AssignmentExpression (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [187]: {
  [PostfixExpression ::= PostfixExpression ARROW ID (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [188]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA RBRACK }]
  [PostfixExpression ::= PostfixExpression LBRACK Expression (*) RBRACK , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on COMMA to state [130]
transition on RBRACK to state [189]

-------------------
lalr_state [189]: {
  [PostfixExpression ::= PostfixExpression LBRACK Expression RBRACK (*) , {COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}

-------------------
lalr_state [190]: {
  [declaration ::= VAR bitfield_list type name initialization SEMICOLON (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [191]: {
  [declaration ::= TYPEDEF type (*) name SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [name ::= (*) ID , {SEMICOLON }]
}
transition on name to state [192]
transition on ID to state [19]

-------------------
lalr_state [192]: {
  [declaration ::= TYPEDEF type name (*) SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on SEMICOLON to state [193]

-------------------
lalr_state [193]: {
  [declaration ::= TYPEDEF type name SEMICOLON (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [194]: {
  [TypeName ::= (*) VOID , {ID LBRACK TIMES }]
  [TypeName ::= (*) CHAR , {ID LBRACK TIMES }]
  [TypeName ::= (*) INT , {ID LBRACK TIMES }]
  [declaration ::= FUN bitfield_list (*) type name type_parameters SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [type ::= (*) TypeName , {ID }]
  [TypeName ::= (*) ENUM , {ID LBRACK TIMES }]
  [TypeName ::= (*) SHORT , {ID LBRACK TIMES }]
  [TypeName ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [declaration ::= FUN bitfield_list (*) type name parameters CompoundStatement , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [type ::= (*) TypeName type_augments , {ID }]
  [TypeName ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [TypeName ::= (*) LONG , {ID LBRACK TIMES }]
  [TypeName ::= (*) FLOAT , {ID LBRACK TIMES }]
}
transition on SHORT to state [33]
transition on CHAR to state [32]
transition on FLOAT to state [31]
transition on type to state [195]
transition on DOUBLE to state [29]
transition on TypeName to state [27]
transition on VOID to state [26]
transition on LONG to state [25]
transition on INT to state [24]
transition on ENUM to state [23]

-------------------
lalr_state [195]: {
  [declaration ::= FUN bitfield_list type (*) name type_parameters SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= FUN bitfield_list type (*) name parameters CompoundStatement , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [name ::= (*) ID , {LPAREN }]
}
transition on name to state [196]
transition on ID to state [19]

-------------------
lalr_state [196]: {
  [parameters ::= (*) LPAREN RPAREN , {LBRACE }]
  [type_parameters ::= (*) LPAREN RPAREN , {SEMICOLON }]
  [declaration ::= FUN bitfield_list type name (*) parameters CompoundStatement , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [parameters ::= (*) LPAREN parameter_list COMMA ELIPSES RPAREN , {LBRACE }]
  [type_parameters ::= (*) LPAREN parameter_type_list COMMA ELIPSES RPAREN , {SEMICOLON }]
  [parameters ::= (*) LPAREN parameter_list RPAREN , {LBRACE }]
  [type_parameters ::= (*) LPAREN parameter_type_list RPAREN , {SEMICOLON }]
  [declaration ::= FUN bitfield_list type name (*) type_parameters SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on LPAREN to state [199]
transition on parameters to state [198]
transition on type_parameters to state [197]

-------------------
lalr_state [197]: {
  [declaration ::= FUN bitfield_list type name type_parameters (*) SEMICOLON , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on SEMICOLON to state [277]

-------------------
lalr_state [198]: {
  [declaration ::= FUN bitfield_list type name parameters (*) CompoundStatement , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on CompoundStatement to state [217]
transition on LBRACE to state [216]

-------------------
lalr_state [199]: {
  [parameters ::= LPAREN (*) parameter_list RPAREN , {LBRACE }]
  [TypeName ::= (*) DOUBLE , {ID COMMA RPAREN LBRACK TIMES }]
  [parameter_type_list ::= (*) type , {COMMA RPAREN }]
  [TypeName ::= (*) ENUM ID , {ID COMMA RPAREN LBRACK TIMES }]
  [type ::= (*) TypeName type_augments , {ID COMMA RPAREN }]
  [type_parameters ::= LPAREN (*) parameter_type_list COMMA ELIPSES RPAREN , {SEMICOLON }]
  [TypeName ::= (*) INT , {ID COMMA RPAREN LBRACK TIMES }]
  [parameter_list ::= (*) type name , {COMMA RPAREN }]
  [TypeName ::= (*) SHORT , {ID COMMA RPAREN LBRACK TIMES }]
  [parameters ::= LPAREN (*) parameter_list COMMA ELIPSES RPAREN , {LBRACE }]
  [parameter_type_list ::= (*) parameter_type_list COMMA type , {COMMA RPAREN }]
  [TypeName ::= (*) CHAR , {ID COMMA RPAREN LBRACK TIMES }]
  [TypeName ::= (*) ENUM , {ID COMMA RPAREN LBRACK TIMES }]
  [type ::= (*) TypeName , {ID COMMA RPAREN }]
  [type_parameters ::= LPAREN (*) RPAREN , {SEMICOLON }]
  [TypeName ::= (*) FLOAT , {ID COMMA RPAREN LBRACK TIMES }]
  [parameter_list ::= (*) parameter_list COMMA type name , {COMMA RPAREN }]
  [TypeName ::= (*) VOID , {ID COMMA RPAREN LBRACK TIMES }]
  [type_parameters ::= LPAREN (*) parameter_type_list RPAREN , {SEMICOLON }]
  [parameters ::= LPAREN (*) RPAREN , {LBRACE }]
  [TypeName ::= (*) LONG , {ID COMMA RPAREN LBRACK TIMES }]
}
transition on SHORT to state [33]
transition on parameter_list to state [203]
transition on CHAR to state [32]
transition on FLOAT to state [31]
transition on parameter_type_list to state [202]
transition on RPAREN to state [201]
transition on type to state [200]
transition on DOUBLE to state [29]
transition on TypeName to state [27]
transition on VOID to state [26]
transition on LONG to state [25]
transition on INT to state [24]
transition on ENUM to state [23]

-------------------
lalr_state [200]: {
  [parameter_list ::= type (*) name , {COMMA RPAREN }]
  [name ::= (*) ID , {COMMA RPAREN }]
  [parameter_type_list ::= type (*) , {COMMA RPAREN }]
}
transition on name to state [215]
transition on ID to state [19]

-------------------
lalr_state [201]: {
  [parameters ::= LPAREN RPAREN (*) , {LBRACE }]
  [type_parameters ::= LPAREN RPAREN (*) , {SEMICOLON }]
}

-------------------
lalr_state [202]: {
  [type_parameters ::= LPAREN parameter_type_list (*) COMMA ELIPSES RPAREN , {SEMICOLON }]
  [parameter_type_list ::= parameter_type_list (*) COMMA type , {COMMA RPAREN }]
  [type_parameters ::= LPAREN parameter_type_list (*) RPAREN , {SEMICOLON }]
}
transition on RPAREN to state [211]
transition on COMMA to state [210]

-------------------
lalr_state [203]: {
  [parameter_list ::= parameter_list (*) COMMA type name , {COMMA RPAREN }]
  [parameters ::= LPAREN parameter_list (*) COMMA ELIPSES RPAREN , {LBRACE }]
  [parameters ::= LPAREN parameter_list (*) RPAREN , {LBRACE }]
}
transition on RPAREN to state [205]
transition on COMMA to state [204]

-------------------
lalr_state [204]: {
  [parameter_list ::= parameter_list COMMA (*) type name , {COMMA RPAREN }]
  [parameters ::= LPAREN parameter_list COMMA (*) ELIPSES RPAREN , {LBRACE }]
  [TypeName ::= (*) VOID , {ID LBRACK TIMES }]
  [TypeName ::= (*) CHAR , {ID LBRACK TIMES }]
  [TypeName ::= (*) INT , {ID LBRACK TIMES }]
  [type ::= (*) TypeName , {ID }]
  [TypeName ::= (*) ENUM , {ID LBRACK TIMES }]
  [TypeName ::= (*) SHORT , {ID LBRACK TIMES }]
  [TypeName ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type ::= (*) TypeName type_augments , {ID }]
  [TypeName ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [TypeName ::= (*) LONG , {ID LBRACK TIMES }]
  [TypeName ::= (*) FLOAT , {ID LBRACK TIMES }]
}
transition on SHORT to state [33]
transition on CHAR to state [32]
transition on FLOAT to state [31]
transition on ELIPSES to state [207]
transition on type to state [206]
transition on DOUBLE to state [29]
transition on TypeName to state [27]
transition on VOID to state [26]
transition on LONG to state [25]
transition on INT to state [24]
transition on ENUM to state [23]

-------------------
lalr_state [205]: {
  [parameters ::= LPAREN parameter_list RPAREN (*) , {LBRACE }]
}

-------------------
lalr_state [206]: {
  [parameter_list ::= parameter_list COMMA type (*) name , {COMMA RPAREN }]
  [name ::= (*) ID , {COMMA RPAREN }]
}
transition on name to state [209]
transition on ID to state [19]

-------------------
lalr_state [207]: {
  [parameters ::= LPAREN parameter_list COMMA ELIPSES (*) RPAREN , {LBRACE }]
}
transition on RPAREN to state [208]

-------------------
lalr_state [208]: {
  [parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN (*) , {LBRACE }]
}

-------------------
lalr_state [209]: {
  [parameter_list ::= parameter_list COMMA type name (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [210]: {
  [TypeName ::= (*) VOID , {COMMA RPAREN LBRACK TIMES }]
  [type_parameters ::= LPAREN parameter_type_list COMMA (*) ELIPSES RPAREN , {SEMICOLON }]
  [TypeName ::= (*) CHAR , {COMMA RPAREN LBRACK TIMES }]
  [TypeName ::= (*) INT , {COMMA RPAREN LBRACK TIMES }]
  [type ::= (*) TypeName , {COMMA RPAREN }]
  [parameter_type_list ::= parameter_type_list COMMA (*) type , {COMMA RPAREN }]
  [TypeName ::= (*) ENUM , {COMMA RPAREN LBRACK TIMES }]
  [TypeName ::= (*) SHORT , {COMMA RPAREN LBRACK TIMES }]
  [TypeName ::= (*) DOUBLE , {COMMA RPAREN LBRACK TIMES }]
  [type ::= (*) TypeName type_augments , {COMMA RPAREN }]
  [TypeName ::= (*) ENUM ID , {COMMA RPAREN LBRACK TIMES }]
  [TypeName ::= (*) LONG , {COMMA RPAREN LBRACK TIMES }]
  [TypeName ::= (*) FLOAT , {COMMA RPAREN LBRACK TIMES }]
}
transition on SHORT to state [33]
transition on CHAR to state [32]
transition on FLOAT to state [31]
transition on ELIPSES to state [213]
transition on type to state [212]
transition on DOUBLE to state [29]
transition on TypeName to state [27]
transition on VOID to state [26]
transition on LONG to state [25]
transition on INT to state [24]
transition on ENUM to state [23]

-------------------
lalr_state [211]: {
  [type_parameters ::= LPAREN parameter_type_list RPAREN (*) , {SEMICOLON }]
}

-------------------
lalr_state [212]: {
  [parameter_type_list ::= parameter_type_list COMMA type (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [213]: {
  [type_parameters ::= LPAREN parameter_type_list COMMA ELIPSES (*) RPAREN , {SEMICOLON }]
}
transition on RPAREN to state [214]

-------------------
lalr_state [214]: {
  [type_parameters ::= LPAREN parameter_type_list COMMA ELIPSES RPAREN (*) , {SEMICOLON }]
}

-------------------
lalr_state [215]: {
  [parameter_list ::= type name (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [216]: {
  [DeclarationListOpt ::= (*) DeclarationList , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [declaration ::= (*) FUN bitfield_list type name parameters CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) EXTERN , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [CompoundStatement ::= LBRACE (*) DeclarationListOpt StatementListOpt RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [DeclarationList ::= (*) declaration , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [declaration ::= (*) bitfield_list struct_or_union name struct_or_union_declarator , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) CONST , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) REGISTER , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) FUN bitfield_list type name type_parameters SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= (*) , {STRUCT UNION }]
  [bitfield_value ::= (*) STATIC , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [DeclarationListOpt ::= (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [DeclarationList ::= (*) declaration DeclarationList , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [declaration ::= (*) VAR bitfield_list type name initialization SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) ENUM ID LBRACE enumerator_list RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_value ::= (*) VOLATILE , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [declaration ::= (*) TYPEDEF type name SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {STRUCT UNION }]
  [bitfield_value ::= (*) AUTO , {CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on CONST to state [15]
transition on bitfield_list to state [14]
transition on AUTO to state [13]
transition on bitfield_value to state [12]
transition on VOLATILE to state [11]
transition on EXTERN to state [10]
transition on VAR to state [9]
transition on TYPEDEF to state [8]
transition on DeclarationList to state [7]
transition on REGISTER to state [6]
transition on FUN to state [5]
transition on declaration to state [3]
transition on STATIC to state [4]
transition on DeclarationListOpt to state [218]
transition on ENUM to state [2]

-------------------
lalr_state [217]: {
  [declaration ::= FUN bitfield_list type name parameters CompoundStatement (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [218]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [StatementList ::= (*) Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= LBRACE DeclarationListOpt (*) StatementListOpt RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) LabeledStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) ExpressionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [StatementListOpt ::= (*) , {RBRACE }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [StatementListOpt ::= (*) StatementList , {RBRACE }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) ID COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [StatementList ::= (*) StatementList Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on Statement to state [235]
transition on DECIMAL_LITERAL to state [50]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on StatementListOpt to state [224]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on StatementList to state [221]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on Constant to state [74]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [219]: {
  [JumpStatement ::= CONTINUE (*) SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on SEMICOLON to state [276]

-------------------
lalr_state [220]: {
  [Statement ::= ExpressionStatement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [221]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) LabeledStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) ExpressionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [StatementListOpt ::= StatementList (*) , {RBRACE }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) ID COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [StatementList ::= StatementList (*) Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on DECIMAL_LITERAL to state [50]
transition on Statement to state [275]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [222]: {
  [IterationStatement ::= FOR (*) LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on LPAREN to state [267]

-------------------
lalr_state [223]: {
  [Statement ::= CompoundStatement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [224]: {
  [CompoundStatement ::= LBRACE DeclarationListOpt StatementListOpt (*) RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on RBRACE to state [266]

-------------------
lalr_state [225]: {
  [SelectionStatement ::= IF (*) LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [SelectionStatement ::= IF (*) LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on LPAREN to state [260]

-------------------
lalr_state [226]: {
  [LabeledStatement ::= ID (*) COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [PrimaryExpression ::= ID (*) , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on COLON to state [258]

-------------------
lalr_state [227]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= RETURN (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [236]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ExpressionOpt to state [256]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [228]: {
  [Statement ::= LabeledStatement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [229]: {
  [Statement ::= JumpStatement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [230]: {
  [JumpStatement ::= BREAK (*) SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on SEMICOLON to state [255]

-------------------
lalr_state [231]: {
  [JumpStatement ::= GOTO (*) ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on ID to state [253]

-------------------
lalr_state [232]: {
  [IterationStatement ::= WHILE (*) LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on LPAREN to state [249]

-------------------
lalr_state [233]: {
  [Statement ::= SelectionStatement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [234]: {
  [LabeledStatement ::= DEFAULT (*) COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on COLON to state [247]

-------------------
lalr_state [235]: {
  [StatementList ::= Statement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [236]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ExpressionOpt ::= Expression (*) , {SEMICOLON }]
}
transition on COMMA to state [130]

-------------------
lalr_state [237]: {
  [ExpressionStatement ::= ExpressionOpt (*) SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on SEMICOLON to state [246]

-------------------
lalr_state [238]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {WHILE }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {WHILE }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {WHILE }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {WHILE }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {WHILE }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {WHILE }]
  [Statement ::= (*) LabeledStatement , {WHILE }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {WHILE }]
  [Statement ::= (*) CompoundStatement , {WHILE }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {WHILE }]
  [Statement ::= (*) ExpressionStatement , {WHILE }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {WHILE }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {WHILE }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {WHILE }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {WHILE }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {WHILE }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {WHILE }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= DO (*) Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {WHILE }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) ID COLON Statement , {WHILE }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on Statement to state [240]
transition on DECIMAL_LITERAL to state [50]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [239]: {
  [Statement ::= IterationStatement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [240]: {
  [IterationStatement ::= DO Statement (*) WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on WHILE to state [241]

-------------------
lalr_state [241]: {
  [IterationStatement ::= DO Statement WHILE (*) LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on LPAREN to state [242]

-------------------
lalr_state [242]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA RPAREN }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [IterationStatement ::= DO Statement WHILE LPAREN (*) Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [243]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [243]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA RPAREN }]
  [IterationStatement ::= DO Statement WHILE LPAREN Expression (*) RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on RPAREN to state [244]
transition on COMMA to state [130]

-------------------
lalr_state [244]: {
  [IterationStatement ::= DO Statement WHILE LPAREN Expression RPAREN (*) SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on SEMICOLON to state [245]

-------------------
lalr_state [245]: {
  [IterationStatement ::= DO Statement WHILE LPAREN Expression RPAREN SEMICOLON (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [246]: {
  [ExpressionStatement ::= ExpressionOpt SEMICOLON (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [247]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= DEFAULT COLON (*) Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) LabeledStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) ExpressionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) ID COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on Statement to state [248]
transition on DECIMAL_LITERAL to state [50]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [248]: {
  [LabeledStatement ::= DEFAULT COLON Statement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [249]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA RPAREN }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= WHILE LPAREN (*) Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [250]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [250]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA RPAREN }]
  [IterationStatement ::= WHILE LPAREN Expression (*) RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on RPAREN to state [251]
transition on COMMA to state [130]

-------------------
lalr_state [251]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) LabeledStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) ExpressionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [IterationStatement ::= WHILE LPAREN Expression RPAREN (*) Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) ID COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on Statement to state [252]
transition on DECIMAL_LITERAL to state [50]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [252]: {
  [IterationStatement ::= WHILE LPAREN Expression RPAREN Statement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [253]: {
  [JumpStatement ::= GOTO ID (*) SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on SEMICOLON to state [254]

-------------------
lalr_state [254]: {
  [JumpStatement ::= GOTO ID SEMICOLON (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [255]: {
  [JumpStatement ::= BREAK SEMICOLON (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [256]: {
  [JumpStatement ::= RETURN ExpressionOpt (*) SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on SEMICOLON to state [257]

-------------------
lalr_state [257]: {
  [JumpStatement ::= RETURN ExpressionOpt SEMICOLON (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [258]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) LabeledStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) ExpressionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= ID COLON (*) Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LabeledStatement ::= (*) ID COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on DECIMAL_LITERAL to state [50]
transition on Statement to state [259]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [259]: {
  [LabeledStatement ::= ID COLON Statement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [260]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA RPAREN }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [SelectionStatement ::= IF LPAREN (*) Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= IF LPAREN (*) Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [261]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [261]: {
  [SelectionStatement ::= IF LPAREN Expression (*) RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA RPAREN }]
  [SelectionStatement ::= IF LPAREN Expression (*) RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on RPAREN to state [262]
transition on COMMA to state [130]

-------------------
lalr_state [262]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) LabeledStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) ExpressionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= IF LPAREN Expression RPAREN (*) Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [SelectionStatement ::= IF LPAREN Expression RPAREN (*) Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) ID COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on Statement to state [263]
transition on DECIMAL_LITERAL to state [50]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [263]: {
  [SelectionStatement ::= IF LPAREN Expression RPAREN Statement (*) ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [SelectionStatement ::= IF LPAREN Expression RPAREN Statement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on ELSE to state [264]

-------------------
lalr_state [264]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) LabeledStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) ExpressionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= IF LPAREN Expression RPAREN Statement ELSE (*) Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) ID COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on Statement to state [265]
transition on DECIMAL_LITERAL to state [50]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [265]: {
  [SelectionStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [266]: {
  [CompoundStatement ::= LBRACE DeclarationListOpt StatementListOpt RBRACE (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [267]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [IterationStatement ::= FOR LPAREN (*) Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [268]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [268]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [IterationStatement ::= FOR LPAREN Expression (*) SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on SEMICOLON to state [269]
transition on COMMA to state [130]

-------------------
lalr_state [269]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [IterationStatement ::= FOR LPAREN Expression SEMICOLON (*) Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [270]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [270]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [IterationStatement ::= FOR LPAREN Expression SEMICOLON Expression (*) SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on SEMICOLON to state [271]
transition on COMMA to state [130]

-------------------
lalr_state [271]: {
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA RPAREN }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) Constant , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA RPAREN AND OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA RPAREN }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA RPAREN EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA RPAREN OR QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Expression ::= (*) AssignmentExpression , {COMMA RPAREN }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA RPAREN AND OR BWISEOR QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA RPAREN PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) ID , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= FOR LPAREN Expression SEMICOLON Expression SEMICOLON (*) Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA RPAREN }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA RPAREN AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA RPAREN EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA LPAREN RPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
}
transition on AssignmentExpression to state [129]
transition on Expression to state [272]
transition on MultiplicativeExpression to state [96]
transition on AdditiveExpression to state [95]
transition on MINUS to state [94]
transition on EqualityExpression to state [93]
transition on CHAR_LITERAL to state [51]
transition on INCREMENT to state [92]
transition on RelationalExpression to state [91]
transition on ConditionalExpression to state [90]
transition on UnaryExpression to state [89]
transition on LogicalOrExpression to state [88]
transition on STRING_LITERAL to state [87]
transition on TILDE to state [86]
transition on UnaryOperator to state [85]
transition on ShiftExpression to state [84]
transition on ID to state [83]
transition on LPAREN to state [81]
transition on LogicalAndExpression to state [80]
transition on BITWISEAND to state [79]
transition on DECREMENT to state [78]
transition on NOT to state [77]
transition on CastExpression to state [76]
transition on DECIMAL_LITERAL to state [50]
transition on PrimaryExpression to state [75]
transition on Constant to state [74]
transition on AndExpression to state [73]
transition on ExclusiveOrExpression to state [72]
transition on PLUS to state [71]
transition on InclusiveOrExpression to state [70]
transition on SIZEOF to state [69]
transition on PostfixExpression to state [68]
transition on TIMES to state [67]

-------------------
lalr_state [272]: {
  [Expression ::= Expression (*) COMMA AssignmentExpression , {COMMA RPAREN }]
  [IterationStatement ::= FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression (*) RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}
transition on RPAREN to state [273]
transition on COMMA to state [130]

-------------------
lalr_state [273]: {
  [IterationStatement ::= (*) FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) DEFAULT COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression RSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [AndExpression ::= (*) EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) BITWISEAND , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) GOTO ID SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalOrExpression ::= (*) LogicalOrExpression OR LogicalAndExpression , {COMMA SEMICOLON OR QUESTION }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression TIMES CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PrimaryExpression , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [CompoundStatement ::= (*) LBRACE DeclarationListOpt StatementListOpt RBRACE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [RelationalExpression ::= (*) ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionStatement ::= (*) ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AndExpression ::= (*) AndExpression BITWISEAND EqualityExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryOperator ::= (*) TIMES , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) CONTINUE SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) LabeledStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression DIVIDE CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LBRACK Expression RBRACK , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [ExpressionOpt ::= (*) , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) PLUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [JumpStatement ::= (*) BREAK SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) CompoundStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ConditionalExpression ::= (*) LogicalOrExpression QUESTION Expression COLON ConditionalExpression , {COMMA SEMICOLON }]
  [MultiplicativeExpression ::= (*) MultiplicativeExpression MODULUS CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression LPAREN ArgumentExpressionListOpt RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GT ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) PostfixExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [ExpressionOpt ::= (*) Expression , {SEMICOLON }]
  [ExclusiveOrExpression ::= (*) ExclusiveOrExpression BWISEXOR AndExpression , {COMMA SEMICOLON AND OR BWISEOR BWISEXOR QUESTION }]
  [UnaryOperator ::= (*) MINUS , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [JumpStatement ::= (*) RETURN ExpressionOpt SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Statement ::= (*) ExpressionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) ConditionalExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression PERIOD ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression LE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) INCREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) TILDE , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) Constant , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) SelectionStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [AssignmentExpression ::= (*) UnaryExpression AssignmentOperator AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression PLUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression ARROW ID , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [RelationalExpression ::= (*) RelationalExpression GE ShiftExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) DECREMENT UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [SelectionStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [InclusiveOrExpression ::= (*) InclusiveOrExpression BWISEOR ExclusiveOrExpression , {COMMA SEMICOLON AND OR BWISEOR QUESTION }]
  [UnaryOperator ::= (*) NOT , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL LPAREN PLUS MINUS TIMES SIZEOF DECREMENT INCREMENT TILDE BITWISEAND NOT }]
  [PrimaryExpression ::= (*) STRING_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) IterationStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) AssignmentExpression , {COMMA SEMICOLON }]
  [AdditiveExpression ::= (*) AdditiveExpression MINUS MultiplicativeExpression , {COMMA SEMICOLON PLUS MINUS EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression INCREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) UnaryOperator CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [PrimaryExpression ::= (*) LPAREN Expression RPAREN , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [Statement ::= (*) JumpStatement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [Expression ::= (*) Expression COMMA AssignmentExpression , {COMMA SEMICOLON }]
  [ShiftExpression ::= (*) AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [PostfixExpression ::= (*) PostfixExpression DECREMENT , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [EqualityExpression ::= (*) EqualityExpression EQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF UnaryExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [IterationStatement ::= (*) DO Statement WHILE LPAREN Expression RPAREN SEMICOLON , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [LogicalAndExpression ::= (*) LogicalAndExpression AND InclusiveOrExpression , {COMMA SEMICOLON AND OR QUESTION }]
  [CastExpression ::= (*) LPAREN TypeName RPAREN CastExpression , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA SEMICOLON LPAREN LBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR PERIOD BITWISEAND MODULUS QUESTION }]
  [LabeledStatement ::= (*) ID COLON Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [ShiftExpression ::= (*) ShiftExpression LSHIFT AdditiveExpression , {COMMA SEMICOLON EQ NEQ LT LE GT GE AND OR RSHIFT LSHIFT BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [IterationStatement ::= FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN (*) Statement , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
  [EqualityExpression ::= (*) EqualityExpression NEQ RelationalExpression , {COMMA SEMICOLON EQ NEQ AND OR BWISEOR BWISEXOR BITWISEAND QUESTION }]
  [UnaryExpression ::= (*) SIZEOF LPAREN TypeName RPAREN , {COMMA SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN RSHIFT LSHIFT DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN BWISEOR BWISEXOR BITWISEAND MODULUS QUESTION }]
}
transition on PostfixExpression to state [68]
transition on IterationStatement to state [239]
transition on DO to state [238]
transition on ExpressionOpt to state [237]
transition on RelationalExpression to state [91]
transition on Expression to state [236]
transition on DECIMAL_LITERAL to state [50]
transition on Statement to state [274]
transition on DEFAULT to state [234]
transition on UnaryOperator to state [85]
transition on SelectionStatement to state [233]
transition on WHILE to state [232]
transition on GOTO to state [231]
transition on LogicalOrExpression to state [88]
transition on LBRACE to state [216]
transition on TIMES to state [67]
transition on ShiftExpression to state [84]
transition on BREAK to state [230]
transition on JumpStatement to state [229]
transition on EqualityExpression to state [93]
transition on ConditionalExpression to state [90]
transition on AssignmentExpression to state [129]
transition on LabeledStatement to state [228]
transition on MultiplicativeExpression to state [96]
transition on RETURN to state [227]
transition on ID to state [226]
transition on IF to state [225]
transition on PLUS to state [71]
transition on PrimaryExpression to state [75]
transition on InclusiveOrExpression to state [70]
transition on AndExpression to state [73]
transition on CompoundStatement to state [223]
transition on AdditiveExpression to state [95]
transition on UnaryExpression to state [89]
transition on NOT to state [77]
transition on SIZEOF to state [69]
transition on CastExpression to state [76]
transition on TILDE to state [86]
transition on MINUS to state [94]
transition on FOR to state [222]
transition on DECREMENT to state [78]
transition on ExpressionStatement to state [220]
transition on CONTINUE to state [219]
transition on LPAREN to state [81]
transition on BITWISEAND to state [79]
transition on CHAR_LITERAL to state [51]
transition on Constant to state [74]
transition on INCREMENT to state [92]
transition on ExclusiveOrExpression to state [72]
transition on STRING_LITERAL to state [87]
transition on LogicalAndExpression to state [80]

-------------------
lalr_state [274]: {
  [IterationStatement ::= FOR LPAREN Expression SEMICOLON Expression SEMICOLON Expression RPAREN Statement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [275]: {
  [StatementList ::= StatementList Statement (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [276]: {
  [JumpStatement ::= CONTINUE SEMICOLON (*) , {ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF ELSE WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [277]: {
  [declaration ::= FUN bitfield_list type name type_parameters SEMICOLON (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [278]: {
  [DeclarationList ::= declaration DeclarationList (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK CONTINUE SIZEOF RETURN GOTO DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT }]
}

-------------------
lalr_state [279]: {
  [declaration ::= ENUM ID (*) LBRACE enumerator_list RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on LBRACE to state [280]

-------------------
lalr_state [280]: {
  [enumerator ::= (*) ID , {COMMA RBRACE }]
  [enumerator_list ::= (*) enumerator_list COMMA enumerator , {COMMA RBRACE }]
  [enumerator ::= (*) ID ASSIGN Constant , {COMMA RBRACE }]
  [enumerator_list ::= (*) enumerator , {COMMA RBRACE }]
  [declaration ::= ENUM ID LBRACE (*) enumerator_list RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on enumerator to state [283]
transition on enumerator_list to state [282]
transition on ID to state [281]

-------------------
lalr_state [281]: {
  [enumerator ::= ID (*) ASSIGN Constant , {COMMA RBRACE }]
  [enumerator ::= ID (*) , {COMMA RBRACE }]
}
transition on ASSIGN to state [287]

-------------------
lalr_state [282]: {
  [enumerator_list ::= enumerator_list (*) COMMA enumerator , {COMMA RBRACE }]
  [declaration ::= ENUM ID LBRACE enumerator_list (*) RBRACE , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}
transition on RBRACE to state [285]
transition on COMMA to state [284]

-------------------
lalr_state [283]: {
  [enumerator_list ::= enumerator (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [284]: {
  [enumerator ::= (*) ID , {COMMA RBRACE }]
  [enumerator_list ::= enumerator_list COMMA (*) enumerator , {COMMA RBRACE }]
  [enumerator ::= (*) ID ASSIGN Constant , {COMMA RBRACE }]
}
transition on enumerator to state [286]
transition on ID to state [281]

-------------------
lalr_state [285]: {
  [declaration ::= ENUM ID LBRACE enumerator_list RBRACE (*) , {EOF ID STRING_LITERAL DECIMAL_LITERAL CHAR_LITERAL SEMICOLON LPAREN LBRACE RBRACE PLUS MINUS TIMES IF WHILE FOR DO BREAK FUN VAR CONTINUE TYPEDEF SIZEOF RETURN GOTO ENUM DECREMENT INCREMENT TILDE BITWISEAND NOT DEFAULT CONST VOLATILE EXTERN STATIC AUTO REGISTER STRUCT UNION }]
}

-------------------
lalr_state [286]: {
  [enumerator_list ::= enumerator_list COMMA enumerator (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [287]: {
  [Constant ::= (*) DECIMAL_LITERAL , {COMMA RBRACE }]
  [enumerator ::= ID ASSIGN (*) Constant , {COMMA RBRACE }]
  [Constant ::= (*) CHAR_LITERAL , {COMMA RBRACE }]
}
transition on Constant to state [288]
transition on CHAR_LITERAL to state [51]
transition on DECIMAL_LITERAL to state [50]

-------------------
lalr_state [288]: {
  [enumerator ::= ID ASSIGN Constant (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [289]: {
  [$START ::= DeclarationListOpt EOF (*) , {EOF }]
}

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 23 warnings
  84 terminals, 70 non terminals, and 182 productions declared, 
  producing 290 unique parse states.
  9 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  2 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
